{"version":3,"sources":["reportWebVitals.js","robots.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","robots","id","name","username","email","Card","className","alt","src","CardList","map","user","index","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","res","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"4MAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCwDCQ,G,MA/DA,CACX,CACIC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,2CCzCAC,EAfF,SAAC,GAAuB,IAAtBH,EAAqB,EAArBA,KAAME,EAAe,EAAfA,MAAOH,EAAQ,EAARA,GAGxB,OACI,sBAAMK,UAAW,sDAAjB,UACG,qBAAKC,IAAI,gBAAgBC,IAAG,+BAA0BP,EAA1B,cAC5B,gCACC,oBAAIK,UAAU,OAAd,SAAsBJ,IACtB,4BAAIE,WCkBDK,EAxBE,SAAC,GAAc,IAAbT,EAAY,EAAZA,OAKX,OACI,8BAEIA,EAAOU,KAAK,SAACC,EAAMC,GACb,OACM,cAAC,EAAD,CAEAX,GAAID,EAAOY,GAAOX,GAClBC,KAAMF,EAAOY,GAAOV,KACpBE,MAAOJ,EAAOY,GAAOR,OAHhBQ,SCFlBC,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKR,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBS,KAAK,SACLC,YAAY,qBACZC,SAAUH,OCKPI,G,MAXA,SAACC,GAGZ,OACA,qBAAKC,MAAQ,CAAEC,SAAU,SAAWC,OAAQ,kBAAmBC,OAAQ,SAAvE,SACIJ,EAAMK,aC6DCC,E,kDAxDX,aAAc,IAAD,8BACT,gBAuBHC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAvB1C,EAAKC,MAAQ,CACThC,OAAQ,GACR6B,YAAa,IAJR,E,qDASb,WAAqB,IAAD,OAEhBI,MAAM,8CACLvC,MAAK,SAAAwC,GACF,OAAOA,EAAIC,UAEdzC,MAAM,SAAA0C,GACH,EAAKR,SAAS,CAAC5B,OAAQA,S,oBAa/B,WACI,MAA8BqC,KAAKL,MAA5BhC,EAAP,EAAOA,OAAQ6B,EAAf,EAAeA,YACTS,EAAiBtC,EAAOuC,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASb,EAAYY,kBAGzD,OAAqB,IAAlBzC,EAAO2C,OAEE,gDAIR,sBAAKrC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWQ,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UAEI,cAAC,EAAD,CAAU1B,OAAUsC,a,GAhDtBM,aCClBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.fb2c5770.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const robots = [\n    {\n        id: 1,\n        name: 'Leanne Graham',\n        username: 'Bret',\n        email: 'Sincere@april.biz'\n      },\n      {\n        id: 2,\n        name: 'Ervin Howell',\n        username: 'Antonette',\n        email: 'Shanna@melissa.tv'\n      },\n      {\n        id: 3,\n        name: 'Clementine Bauch',\n        username: 'Samantha',\n        email: 'Nathan@yesenia.net'\n      },\n      {\n        id: 4,\n        name: 'Patricia Lebsack',\n        username: 'Karianne',\n        email: 'Julianne.OConner@kory.org'\n      },\n      {\n        id: 5,\n        name: 'Chelsey Dietrich',\n        username: 'Kamren',\n        email: 'Lucio_Hettinger@annie.ca'\n      },\n      {\n        id: 6,\n        name: 'Mrs. Dennis Schulist',\n        username: 'Leopoldo_Corkery',\n        email: 'Karley_Dach@jasper.info'\n      },\n      {\n        id: 7,\n        name: 'Kurtis Weissnat',\n        username: 'Elwyn.Skiles',\n        email: 'Telly.Hoeger@billy.biz'\n      },\n      {\n        id: 8,\n        name: 'Nicholas Runolfsdottir V',\n        username: 'Maxime_Nienow',\n        email: 'Sherwood@rosamond.me'\n      },\n      {\n        id: 9,\n        name: 'Glenna Reichert',\n        username: 'Delphine',\n        email: 'Chaim_McDermott@dana.io'\n      },\n      {\n        id: 10,\n        name: 'Clementina DuBuque',\n        username: 'Moriah.Stanton',\n        email: 'Rey.Padberg@karina.biz'\n      }\n];\n\nexport default robots;","import React from \"react\";\nimport \"../Card.css\";\n\nconst Card = ({name, email, id}) => {\n\n    //const {name, email, id} = props;\n    return (\n        <div  className= \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n           <img alt=\"img not found\" src={`https://robohash.org/${id}?200X200`} /> \n           <div>\n            <h2 className=\"card\">{name}</h2>\n            <p>{email}</p>\n           </div>\n\n        </div>\n    );\n}\n\nexport default Card;\n\n/**\n * \n * you can destructure props in the parameters as objects by passing the name of each property in {}\n * \n * for <div>  className= \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"\n */","import React from \"react\";\nimport Card from \"./Card\";\n//import robots from './robots';\n\n\nconst CardList = ({robots}) => {\n\n        // if(true){\n        //     throw new Error('HOT DAMMIT ERIC');\n        // }\n        return (\n            <div>\n                {\n                robots.map( (user, index) => \n                    { return (\n                            <Card \n                            key={index}\n                            id={robots[index].id}\n                            name={robots[index].name} \n                            email={robots[index].email} \n                            />\n                        );\n                    })\n                }               \n            </div>\n        );\n   \n}\n\nexport default CardList;\n\n/*\n const cardsArrays = robots.map( (user, index) => {\n        return <Card \n            id={robots[index].id} \n            name={robots[index].name} \n            email={robots[index].email} \n            key={index}\n            />;\n    });\n    return (<div>\n        {cardsArrays}\n        </div>);\n*/","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\" \n            type=\"search\" \n            placeholder=\"Find your bot here\"\n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n\n    //console.log(props);\n    return (\n    <div style={ { overflow: 'scroll' , border: '1px solid black', height: '500px' }}>\n       {props.children}\n\n    </div>\n    );\n}\n\nexport default Scroll;\n\n/**\n * We often return a compoent as a self-closing tag\n * \n * Here, we want to wrap this tag around another tag as\n * a parent to a child tag\n * \n * \n * Every component comes with a children property (an object) linked to properties\n * passed in \n */","import React, { Component } from \"react\";\n//import robots from \"./robots\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\n//import ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"../App.css\";\nimport robots from \"../robots\";\nimport Scroll from \"../components/Scroll\";\n\n\nclass App extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n       \n    }\n\n    componentDidMount() {\n        \n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => {\n            return res.json();\n        })\n        .then( users => {\n            this.setState({robots: robots});\n            //console.log(users);\n\n            //robots: users\n        });\n        //this.setState({robots: robots});\n    }\n\n     onSearchChange = (event) => {        \n        this.setState({ searchfield: event.target.value});\n        //console.log(event.target);\n    }\n\n    render(){\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n\n        if(robots.length === 0){\n\n            return (<h1>Robots Loading</h1>);\n\n        }else{ \n        return (\n            <div className=\"tc\">\n                <h1 className=\"f1\">ROBOFRIENDS</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    \n                    <CardList robots = {filteredRobots} />\n                    \n                </Scroll>\n            </div>);\n        }\n    }\n\n    \n}\n\nexport default App;\n\n/*\n        State >> props\n\n        event - the parameter passed into a function (can be named anything)\n        event.target - returns the html tag that is referenced \n            by the function (where the function is passed)\n        event.target.value - reference the input received by the html tag\n\n        https://create-react-app.dev/docs/deployment/\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Hello from \"./Hello\";\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\";\nimport \"./robots\";\nimport App from \"./containers/App\";\n//import Binita from \"./Binita\";\n\n\nReactDOM.render(\n  <App /> ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}